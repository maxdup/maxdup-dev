@use 'sass:list';
@use "sass:math";
@use 'sass:color';

$hex-chars: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f;

@function hexToDec($N) {
    @return (index($hex-chars, $N) - 1);
}

@function hexToRGB($S) {
    $N: hexToDec($S);
    $N: $N * 16 + $N;
    @return $N;
}

@function hexToFrac($S) {
    $N: hexToDec($S);
    $N: math.div($N, 15);
    @return $N;
}


@function colorCompose($S, $A) {

    $SS: nth($hex-chars, $S + 1);
    $AA: nth($hex-chars, $A + 1);
    @return ##{$SS}#{$SS}#{$SS}#{$SS}#{$SS}#{$SS}#{$AA}#{$AA};
}

@mixin generate-palette($invert: 0%){
    @each $shade in $shade-values {
        $Si: nth($shade, 1);
        $Ai: nth($shade, 2);
        $S: hexToDec($Si);
        $A: hexToDec($Ai);
        $varname: base-color-varname($Si, $Ai);
        @if ($invert == 100%){
            $S: 15 - $S;
        }
        #{$varname}: colorCompose($S, $A);
    }
}

@function sort($list) {
    // Sort by shade or alpha
    $len: length($list);
    $sorted: false;

    @while not $sorted {
        $sorted: true;
        @for $i from 1 to ($len - 1) {
            $j: $i + 1;
            $vali: hexToDec(nth(nth($list, $i),1));
            $valj: hexToDec(nth(nth($list, $j),1));
            @if $vali == $valj {
                $vali: hexToDec(nth(nth($list, $i),2));
                $valj: hexToDec(nth(nth($list, $j),2));
            }
            @if $vali > $valj {
                $temp: nth($list, $i);
                $list: set-nth($list, $i, nth($list, $j));
                $list: set-nth($list, $j, $temp);
                $sorted: false;
            }
        }
        $len: $len - 1;
    }
    @return $list;
}

$shade-values: sort($shade-values);

:root {
    @include generate-palette();
}

:root.light-theme {
    @include generate-palette(100%);
}

@media print {
    :root, :root.light-theme {
        @include generate-palette(100%);
    }
}
