@use 'sass:list';
@use "sass:math";
@use 'sass:color';

$hex-chars: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f;

@function hex-to-dec($n) {
    @return (index($hex-chars, $n) - 1);
}

@function hex-to-rgb($s) {
    $n: hex-to-dec($s);
    $n: $n * 16 + $n;
    @return $n;
}

@function hex-to-frac($s) {
    $n: hex-to-dec($s);
    $n: math.div($n, 15);
    @return $n;
}

@function color-compose($s, $a) {

    $ss: list.nth($hex-chars, $s + 1);
    $aa: list.nth($hex-chars, $a + 1);
    @return ##{$ss}#{$ss}#{$ss}#{$ss}#{$ss}#{$ss}#{$aa}#{$aa};
}

@mixin generate-palette($invert: 0%) {
    @each $shade in $shade-values {
        $si: list.nth($shade, 1);
        $ai: list.nth($shade, 2);
        $s: hex-to-dec($si);
        $a: hex-to-dec($ai);
        $varname: base-color-varname($si, $ai);
        @if ($invert == 100%) {
            $s: 15 - $s;
        }
        #{$varname}: color-compose($s, $a);
    }
}

@function sort($list) {
    // Sort by shade or alpha
    $len: list.length($list);
    $sorted: false;

    @while not $sorted {
        $sorted: true;
        @for $i from 1 to ($len - 1) {
            $j: $i + 1;
            $vali: hex-to-dec(list.nth(list.nth($list, $i), 1));
            $valj: hex-to-dec(list.nth(list.nth($list, $j), 1));
            @if $vali == $valj {
                $vali: hex-to-dec(list.nth(list.nth($list, $i), 2));
                $valj: hex-to-dec(list.nth(list.nth($list, $j), 2));
            }
            @if $vali > $valj {
                $temp: list.nth($list, $i);
                $list: list.set-nth($list, $i, list.nth($list, $j));
                $list: list.set-nth($list, $j, $temp);
                $sorted: false;
            }
        }
        $len: $len - 1;
    }
    @return $list;
}

$shade-values: sort($shade-values);
