@use "sass:math";

#trajectory {
    .main-blurb {
        float: right;
    }
    .trajectory-graph {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        margin: auto;
    }

    i {
        font-size: 4rem;
        line-height: 5rem;
        position: absolute;
        top: 0;
        right: 7vw;
        color: base-color(8);
        margin-right: -2.5rem;
    }

    #path.aside-blurb {
        height: 30rem;
    }
}


#trajectory {
    $fast: 0.15s;
    @mixin graph-item() {
        background: base-color(f);
        color: base-color(f);
        transition: background ease-in $fast,
                    color ease-in $fast,
                    font-size ease-in $fast,
                    height ease-in $fast,
                    width ease-in $fast;
    }
    @mixin graph-item-state-active(){
        background: base-color(f);
        color: base-color(f);
        font-size: 3rem;
    }
    @mixin graph-item-state-inactive(){
        background: base-color(8);
        color: base-color(8);
        font-size: 2rem;
    }
    #trajectory-graph {
        padding: 0;
        display: block;
        position: absolute;
        right: 7vw;
        top: 7rem;
        margin: auto;
        pointer-events: none;
    }

    .graph-node {
        height: 0px;
        width: 0px;
        position: absolute;
        list-decoration: none;
        display: flex;
        justify-content: center;

        .graph-node-text {
            position: absolute;
            text-align: right;
            left: -10rem;
            top: -1rem;
            line-height: 0;
            opacity: 0.5;
            @include graph-item();
            @include graph-item-state-inactive();
        }

        &:hover {
            &:after {
                width: 2rem;
                height: 2rem;
                @include graph-item-state-active();
            }

            .graph-node-text {
                @include graph-item-state-active();
            }
        }
        &:after {
            content: '';
            border-radius: 50%;
            height: 1rem;
            width: 1rem;
            @include graph-item();
            @include graph-item-state-inactive();

            flex-shrink: 0;
            display: inline;
            position: absolute;

            top: -100%;
            bottom: -100%;
            margin: auto;
            z-index: 2;
        }
        .graph-node-line {
            content: '';
            display: block;
            position: absolute;
            bottom: 0;
            left: 0;
            overflow: hidden;
            z-index: -1;

            width: 0;
            height: 0;
            z-index: 1;
            &:before {
                content: '';
                display: block;
                width: 2px;
                height: 100vh;
                background: base-color(8);
                position: absolute;
                left: 0;
                right: 0;
                bottom: 0;
                top: 0;
                margin: auto;
                transform: var(--line-angle);
                transform-origin: 50% 50%;
            }
        }
        &:first-child .graph-node-line {
            content: none;
        }

    }
}

$gWidth: 20vw;
$gHeight: 30vh;
$nudge: 5; // percent
$nNode: 5;

#trajectory-graph {
    height: $gHeight;
    width: $gWidth;
}

@function offsetFor($n){
    $offset: 0;
    @if $n > 1 and $n < $nNode{
        @if $n % 2 == 0 {
            $offset: $nudge;
        } @else {
            $offset: $nudge * -1;
        }
    }
    @return $offset;
}

.graph-node:before,
.graph-node:after {
    height: math.div($gHeight, 4);
}

@for $i from 1 through $nNode {
    #trajectory .graph-node {
        $offset: offsetFor($i);

        &:nth-child(#{$i}){
            top: ($i - 1) * math.div(100%, $nNode - 1);
            left: 100% - ($i - 1) * math.div(100%, $nNode - 1) + $offset;
            .graph-node-line {
                height: math.div($gHeight, 100) * 25;
                width: math.div($gWidth, 100) * (25 - offsetFor($i) + offsetFor($i - 1));
            }
        }
    }
}
